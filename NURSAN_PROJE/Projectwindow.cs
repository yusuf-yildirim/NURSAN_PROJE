using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using DevExpress.XtraGrid.Views.Grid;
using System.IO;
using System.Data.SQLite;
using NURSAN_PROJE.SQL;
using System.Configuration;
using DevExpress.DataAccess.Sql;

namespace NURSAN_PROJE
{
    public partial class Projectwindow : DevExpress.XtraBars.ToolbarForm.ToolbarForm
    {
        private Sockets socket;
        DataTable table1;

        public Projectwindow(string path)
        {
            this.Hide();
            InitializeComponent();
            if (path.Length > 0)
            {
               
                var config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);
                var connectionStringsSection = (ConnectionStringsSection)config.GetSection("connectionStrings");
                connectionStringsSection.ConnectionStrings["tablo"].ConnectionString = @"XpoProvider=SQLite;Data Source=" + path;
                config.Save();
                ConfigurationManager.RefreshSection("connectionStrings");
            }
            else
            {
                MessageBox.Show("YENİ BOŞ BİR PENCERE AÇILMASI AŞAĞIDAKİ KODLAR STANDART TABLIYU AYARLAMAK İÇİN");
                var config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);
                var connectionStringsSection = (ConnectionStringsSection)config.GetSection("connectionStrings");
                connectionStringsSection.ConnectionStrings["tablo"].ConnectionString = @"XpoProvider=SQLite;Data Source=C:\Users\Burakcan\source\repos\NURSAN_PROJE\NURSAN_PROJE\bin\Debug\PROJE DOSYASI ÖRNEĞİ1.nursan";
                config.Save();
                ConfigurationManager.RefreshSection("connectionStrings");
                new Form1().ShowDialog();
                this.Show();
            }



            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            //sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource


            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource


            test();
            
            sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            try
            {
                byte[] data = (byte[])sqlDataSource1.Result["imageStore"].ElementAt(0).ElementAt(2);
                using (var ms = new MemoryStream(data))
                {
                    pictureEdit1.Image = Image.FromStream(ms);
                }
            }
            catch
            {

            }
         
        }

        public void test()
        {

            string cs = @"XpoProvider=SQLite;Data Source=C:\Users\Burakcan\source\repos\NURSAN_PROJE\NURSAN_PROJE\bin\Debug\PROJE DOSYASI ÖRNEĞİ2.nursan";

        using (SQLiteConnection con = new SQLiteConnection(cs))
        {
            
            con.Open();

            byte[] data = null;

            try
            {
                data = File.ReadAllBytes(@"D:\test.jpg");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
 
            SQLiteCommand cmd = new SQLiteCommand(con);
    
            cmd.CommandText = "INSERT INTO ImageStore(imageBlob) VALUES (@img)";
            cmd.Prepare();

            cmd.Parameters.Add("@img", DbType.Binary, data.Length);
            cmd.Parameters["@img"].Value = data;
            cmd.ExecuteNonQuery();
            
            con.Close();
        }
        }


     
        private void SimpleButton1_Click(object sender, EventArgs e)
        {
        }

        private void Projectwindow_Load(object sender, EventArgs e)
        {
            // sqlDataSource1.ConnectionParameters.Equals(Application.StartupPath + "\\database.db");
            sqlDataSource1.Fill();
        }

       
    

        private void SimpleButton2_Click(object sender, EventArgs e)
        {
            dbeng test = new dbeng();
            test.connection_add(textEdit5.Text, textEdit6.Text, textEdit7.Text, textEdit8.Text);
            sqlDataSource1.Fill();
            gridControl1.RefreshDataSource();
        }

        private void simpleButton11_Click(object sender, EventArgs e)
        {
            socket = new Sockets(textEdit13.Text);
            listBoxControl1.Items.Add(socket.getsocketname());
        }

        private void accordionControlElement3_Click(object sender, EventArgs e)
        {

        }

        private void simpleButton1_Click_1(object sender, EventArgs e)
        {
            listBoxControl1.Items.Remove(listBoxControl1.GetItem(listBoxControl1.SelectedIndex));
        }

        private void simpleButton9_Click(object sender, EventArgs e)
        {
            /*   try
               {
                   listBoxControl2.Items.Add(listBoxControl1.GetItem(listBoxControl1.SelectedIndex));
                   listBoxControl1.Items.Remove(listBoxControl1.GetItem(listBoxControl1.SelectedIndex));
                   listBoxControl2.SelectedIndex = listBoxControl2.ItemCount;
               }
               catch (Exception err)
               {
                   Console.WriteLine("no items selected");
               }*/
            try
            {
                gridControl6.DataSource = gridControl5.DataSource;
              /*  listBoxControl1.Items.Remove(listBoxControl1.GetItem(listBoxControl1.SelectedIndex));
                listBoxControl2.SelectedIndex = listBoxControl2.ItemCount;*/
            }
            catch (Exception err)
            {
                Console.WriteLine("no items selected");
            }
        }

        private void simpleButton10_Click(object sender, EventArgs e)
        {
            try
            {
                listBoxControl1.Items.Add(listBoxControl2.GetItem(listBoxControl2.SelectedIndex));
                listBoxControl2.Items.Remove(listBoxControl2.GetItem(listBoxControl2.SelectedIndex));
                listBoxControl1.SelectedIndex = listBoxControl1.ItemCount;
            }
            catch(Exception err)
            {
                Console.WriteLine("no items selected");
            }
        }

        private void textEdit14_TextChanged(object sender, EventArgs e)
        {
            try
            {
                int pinvalue = 0;
                if (textEdit14.Text != "")
                {
                    pinvalue = Convert.ToInt32(textEdit14.Text);
                }
                table1 = new DataTable("pins");
                table1.Columns.Add("Soket");
                table1.Columns.Add("Pin");
                table1.Columns.Add("Test noktası");
                for (int i = 1; i <= pinvalue; i++)
                {
                    table1.Rows.Add(textEdit13.Text, i);
                }
                gridControl4.DataSource = table1;
                gridControl4.RefreshDataSource();
                Console.WriteLine("test");
            }
            catch (FormatException err)
            {
                Console.WriteLine(textEdit14.Text);
            }
        }

        private void dropDownButton1_Click(object sender, EventArgs e)
        {

        }

        private void tbl_SocketBindingSource_CurrentChanged(object sender, EventArgs e)
        {

        }
    }
}


