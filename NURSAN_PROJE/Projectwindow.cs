using System;
using System.Data;
using System.Drawing;
using System.Linq;
using DevExpress.XtraEditors;
using System.IO;
using System.Data.SQLite;
using NURSAN_PROJE.SQL;
using DevExpress.DataAccess.Sql;
using NURSAN_PROJE.Configurator;
using System.Windows.Forms;

namespace NURSAN_PROJE
{
    public partial class Projectwindow : DevExpress.XtraBars.ToolbarForm.ToolbarForm
    {
        private Sockets socket;
        DataTable table1;
        DBeng db;
        public Projectwindow(string path)
        {
            db = new DBeng();
            Config conf = new Config();
            this.Hide();
            InitializeComponent();
            SqlDataSource.DisableCustomQueryValidation = true;
            try
            {
                if (path.Length > 0)
                {
                    conf.set_connectionstring("tablo", path);
                    db.create_recent(path, maindatasource);

                }
                else
                {
                    new Form1().ShowDialog();
                    this.Show();
                }
            }
            catch
            {
                Console.WriteLine("I/O ERROR");
            }






            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            //sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource


            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource


            //   test();

            //  projectdatasource.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            //*--*-*-*-*-*-*-* FOTOĞRAFI VERİ TABANINDAN ALMA

            try
            {
                byte[] data = (byte[])projectdatasource.Result["imageStore"].ElementAt(0).ElementAt(2);
                using (var ms = new MemoryStream(data))
                {
                    pictureEdit1.Image = Image.FromStream(ms);
                }
            }
            catch
            {
                Console.WriteLine("RESİM YÜKLENEMEDİ");
            }

               
        }

        public void test()
        {

            string cs = @"XpoProvider=SQLite;Data Source=C:\Users\Burakcan\source\repos\NURSAN_PROJE\NURSAN_PROJE\bin\Debug\PROJE DOSYASI ÖRNEĞİ2.nursan";

        using (SQLiteConnection con = new SQLiteConnection(cs))
        {
            
            con.Open();

            byte[] data = null;

            try
            {
                data = File.ReadAllBytes(@"D:\test.jpg");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
 
            SQLiteCommand cmd = new SQLiteCommand(con);
    
            cmd.CommandText = "INSERT INTO ImageStore(imageBlob) VALUES (@img)";
            cmd.Prepare();

            cmd.Parameters.Add("@img", DbType.Binary, data.Length);
            cmd.Parameters["@img"].Value = data;
            cmd.ExecuteNonQuery();
            
            con.Close();
        }
        }


        private void Projectwindow_Load(object sender, EventArgs e)
        {
          refresh_socket_grids();
        }

       
    

        private void SimpleButton2_Click(object sender, EventArgs e)
        {
            DBeng test = new DBeng();
            test.connection_add(textEdit5.Text, textEdit6.Text, textEdit7.Text, textEdit8.Text);
            projectdatasource.Fill();
            gridControl1.RefreshDataSource();
        }

        private void simpleButton11_Click(object sender, EventArgs e)
        {
            if (errorprovider_checktext_null() )
            {            
                object[] arr = new object[4];
                arr[0]=(newsocketname.Text);
                arr[1] = Convert.ToInt32(newsocketpinc.Text);
                arr[2] = Convert.ToInt32(newsocketswc.Text);
                arr[3] = Convert.ToInt32(newsocketledc.Text);             
                db.register_socket(arr);
                refresh_socket_grids();
                navigationPane1.State = DevExpress.XtraBars.Navigation.NavigationPaneState.Collapsed;
                foreach (TextEdit t in newsocketvargroup.Controls)
                {
                    t.Text = "";
                }                  
            }
            else
            {   
                Console.WriteLine("hata yok");
            }
        }

        //BOŞ GEÇİLMEMESİ GEREKEN PARAMETRELERİN KONTROLÜ! YENİ SOKET
        private bool errorprovider_checktext_null()
        {
            bool exit_code = true;
            foreach(TextEdit t in newsocketvargroup.Controls)
            {                               
                    if (t.Text == "")
                    {
                        errorprovider.SetError(t, "Bu alan boş geçilemez", DevExpress.XtraEditors.DXErrorProvider.ErrorType.Critical);
                        exit_code = false;
                    }
                    else
                    {
                        errorprovider.SetError(t, "", DevExpress.XtraEditors.DXErrorProvider.ErrorType.None);
                    }
                
            }           
            return exit_code;
        }




        private void simpleButton9_Click(object sender, EventArgs e)
        {
           if(Convert.ToInt32(gridView5.GetRowCellValue(gridView5.GetSelectedRows()[0], "ID_soket")) != 0)
            {
                db.register_using_socket(Convert.ToInt32(gridView5.GetRowCellValue(gridView5.GetSelectedRows()[0], "ID_soket")));
            }
            refresh_socket_grids();
        }



        private void newsocketpinc_TextChanged(object sender, EventArgs e)
        {
            try
            {
                int pinvalue = 0;
                if (newsocketpinc.Text != "")
                {
                    pinvalue = Convert.ToInt32(newsocketpinc.Text);
                }
                table1 = new DataTable("pins");
                table1.Columns.Add("Soket");
                table1.Columns.Add("Pin");
                table1.Columns.Add("Test noktası");
                for (int i = 1; i <= pinvalue; i++)
                {
                    table1.Rows.Add(newsocketname.Text, i);
                }
                gridControl4.DataSource = table1;
                gridControl4.RefreshDataSource();
                Console.WriteLine("test");
            }
            catch (FormatException err)
            {
                Console.WriteLine(newsocketpinc.Text);
            }
        }

        private void simpleButton10_Click(object sender, EventArgs e)
        {
            try
            {             
                if (Convert.ToInt32(gridView6.GetRowCellValue(gridView6.GetSelectedRows()[0], "ID_soket")) != 0)
                {
                    db.unregister_using_socket(Convert.ToInt32(gridView6.GetRowCellValue(gridView6.GetSelectedRows()[0], "ID_soket")));
                }                   
            }
            catch(Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            refresh_socket_grids();
        }
     
        public void refresh_socket_grids()
        {
            try
            {
                projectdatasource.Fill();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.StackTrace);
            }

            gridControl5.DataSource = db.get_saved_sockets();
            dataGridView1.DataSource = db.get_saved_sockets();
        }



        private void unregistermainsocket_button_Click(object sender, EventArgs e)
        {
            try
            {
                if (Convert.ToInt32(gridView5.GetRowCellValue(gridView5.GetSelectedRows()[0], "ID_soket")) != 0)
                {
                    db.unregister_socket(Convert.ToInt32(gridView5.GetRowCellValue(gridView5.GetSelectedRows()[0], "ID_soket")));
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            refresh_socket_grids();
        }
    }
}


